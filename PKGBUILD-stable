#!/bin/bash

major=6
minor=8
subpatch=.9

pkgver=${major}.${minor}${subpatch}
PKGbase=stable
CONF=config-arch
cc=

pkgbase=linux.${PKGbase}
pkgrel=1
arch=("$CARCH")
license=('GPL2')
url='https://www.kernel.org/'
options=('!lfs' !addep)
makedepends=('libelf' xz 'zstd' openssl 'kmod')
if [ "$cc" = 'clang' ]; then makedepends+=(clang); fi

source=(
	"${CONF}" kernel_signing_key.pub
	"https://kernel.org/pub/linux/kernel/v${major}.x/linux-${pkgver}.tar".{xz,sign})
sha256sums=(
	'657611f179378fd1b3bf8f8a71ab273ac254d72047816163a606b24136374a19'
	'71b5dddd64b9dbfb9abf6286adf17d137a6c3d260ee014e59aecbc0904f662e0'
	"$(curl -sL kernel.org/pub/linux/kernel/v${major}.x/sha256sums.asc|grep linux-${pkgver}.tar.xz|awk '{print $1}')"
	'SKIP')
validpgpkeys=(
	'647F28654894E3BD457199BE38DBBDC86092693E'
	'ABAF11C65A2970B130ABE3C479BE3E4300411886')

prepare(){
	[ -d "linux" ] || ln -s linux{-${pkgver},}
	cd linux
	make mrproper
	make clean

	local src
	for src in "${source[@]}"; do
		src="${src%%::*}"
		src="${src##*/}"
		src="${src%.xz}"
		[[ $src = *.patch ]] || continue
		msg2 "Applying patch '$src'..."
		patch -Np1 < "../$src"
	done

	cp ../$CONF .config
	scripts/config \
		--module BCACHEFS_FS \
		--enable BCACHEFS_QUOTA \
		--enable BCACHEFS_POSIX_ACL

	if [ "$cc" = clang ]; then
		scripts/config --disable LTO_CLANG_FULL
		scripts/config --enable LTO_CLANG_THIN
		make CC=clang olddefconfig
	else
		make olddefconfig
	fi

	cp .config ${PKGDEST}/config
	diff -u ../$CONF .config > ${PKGDEST}/config-${pkgver}.diff || true
	scripts/diffconfig .config.old .config > ${PKGDEST}/config-change.diff

	make -s kernelrelease > version
	msg2 "Prepared linux version $(<version)"
}

build(){
	msg2 "pkgbase = $PKGbase"

	if [ "$cc" = clang ]; then
		make CC=clang V=2 -C linux
	else
		make V=2 -C linux
	fi
}

_pack(){
	pkgdesc="The latest stable Linux kernel and modules"
	depends=('kmod' 'initramfs' 'coreutils')
	optdepends=('linux-firmware: firmware images needed for some devices')
	provides=("linux=${pkgver}")
	options+=('!strip')

	cd linux
	kerver="$(<version)"
	modulesdir="$pkgdir/usr/lib/modules/${kerver}"

	msg2 "Installing boot image..."
	install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

	msg2 "Installing modules..."
	make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 DEPMOD=/doesnt/exist modules_install  # Suppress depmod

	echo "$PKGbase"  | install -Dm644 /dev/stdin "$modulesdir/pkgbase"
	rm -f $modulesdir/{source,build}

	touch "$modulesdir/no_initrd"  # 防止 mkinitfs hook 生成 initramfs
	install -d "$modulesdir/kernel/drivers/video"  # 防止 更新/卸载 时 dkms 删除 nv 驱动后，pacman 不删除旧内核中的此目录
}

_pack-headers(){
	pkgdesc="Headers and scripts for building modules for the latest stable Linux kernel"
	provides=("linux-headers=$pkgver")
	if [ "$cc" = clang ]; then depends+=(clang); fi

	is_enabled() {
		grep -q "^$1=y" include/config/auto.conf
	}
	cd linux

	local kerver="$(<version)"
	local builddir="$pkgdir/usr/src/linux-${kerver}"
	local modulesdir="$pkgdir/usr/lib/modules/${kerver}"

	msg2 "Installing build files..."
	install -Dt "$builddir" -m644 .config Makefile Module.symvers version  # System.map vmlinux
	install -Dt "$builddir/kernel" -m644 kernel/Makefile
	install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
	cp -t "$builddir" -a scripts

	if is_enabled CONFIG_OBJTOOL; then
		msg2 "Installing objtool..."
		install -Dt "$builddir/tools/objtool" tools/objtool/objtool # required when STACK_VALIDATION is enabled
	fi

	msg2 "Installing headers..."
	cp -t "$builddir" -a include
	cp -t "$builddir/arch/x86" -a arch/x86/include
	install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

	install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
	install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

	# https://bugs.archlinux.org/task/13146
	install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# https://bugs.archlinux.org/task/20402
	install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# https://bugs.archlinux.org/task/71392
	install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

	msg2 "Installing KConfig files..."
	find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

	msg2 "Removing unneeded architectures..."
	local arch
	for arch in "$builddir"/arch/*/; do
		[[ $arch = */x86/ ]] && continue
		if [ -d "$arch" ]; then
			msg2 "Removing $(basename "$arch")"
			rm -r "$arch"
		fi
	done

	if [ -d "$builddir/Documentation" ]; then
		msg2 "Removing documentation..."
		rm -r "$builddir/Documentation"
	fi

	msg2 "Removing broken symlinks..."
	find -L "$builddir" -type l -printf 'Removing %P\n' -delete

	msg2 "Removing loose objects..."
	find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

	msg2 "Removing .gitignore file..."
	find "$builddir" -name '.gitignore' -delete

	msg2 "Stripping build tools..."
	local file
	while read -rd '' file; do
	case "$(file -bi "$file")" in
		application/x-sharedlib\;*)      # Libraries (.so)
			strip -v $STRIP_SHARED "$file" ;;
		application/x-archive\;*)        # Libraries (.a)
			strip -v $STRIP_STATIC "$file" ;;
		application/x-executable\;*)     # Binaries
			strip -v $STRIP_BINARIES "$file" ;;
		application/x-pie-executable\;*) # Relocatable binaries
			strip -v $STRIP_SHARED "$file" ;;
	esac
	done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

	msg2 "Adding symlink..."
	install -d ${modulesdir}
	ln -s /usr/src/linux-${kerver} "${modulesdir}/build"
	ln -s build "${modulesdir}/source"
	rm -f $builddir/vmlinux
}

pkgname=(${pkgbase}{,-headers})
for _p in "${pkgname[@]}"; do
	eval "package_$_p() {
		$(declare -f "_pack${_p#${pkgbase}}")
		_pack${_p#${pkgbase}}
	}"
done
